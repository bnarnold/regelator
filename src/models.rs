use diesel::prelude::*;
use uuid::Uuid;

// Import the schema generated by Diesel
use crate::schema::*;

// Queryable structs (for reading from database)
#[derive(Queryable, Selectable, Debug, Clone)]
#[diesel(table_name = rule_sets)]
pub struct RuleSet {
    pub id: String,
    pub name: String,
    pub slug: String,
    pub description: Option<String>,
    pub created_at: chrono::NaiveDateTime,
    pub updated_at: chrono::NaiveDateTime,
}

#[derive(Queryable, Selectable, Debug, Clone)]
#[diesel(table_name = versions)]
pub struct Version {
    pub id: String,
    pub rule_set_id: String,
    pub version_name: String,
    pub effective_from: chrono::NaiveDate,
    pub effective_to: Option<chrono::NaiveDate>,
    pub description: Option<String>,
    pub is_current: bool,
    pub created_at: chrono::NaiveDateTime,
}

#[derive(Queryable, Selectable, Debug, Clone)]
#[diesel(table_name = rules)]
pub struct Rule {
    pub id: String,
    pub slug: String,
    pub rule_set_id: String,
    pub version_id: String,
    pub parent_rule_id: Option<String>,
    pub number: String,
    pub created_at: chrono::NaiveDateTime,
    pub updated_at: chrono::NaiveDateTime,
}

#[derive(Queryable, Selectable, Debug, Clone)]
#[diesel(table_name = rule_content)]
pub struct RuleContent {
    pub id: String,
    pub rule_id: String,
    pub language: String,
    pub content_markdown: String,
    pub source_content_id: Option<String>,
    pub created_at: chrono::NaiveDateTime,
    pub updated_at: chrono::NaiveDateTime,
}

#[derive(Queryable, Selectable, Debug, Clone)]
#[diesel(table_name = glossary_terms)]
pub struct GlossaryTerm {
    pub id: String,
    pub rule_set_id: String,
    pub version_id: String,
    pub slug: String,
    pub created_at: chrono::NaiveDateTime,
    pub updated_at: chrono::NaiveDateTime,
}

#[derive(Queryable, Selectable, Debug, Clone)]
#[diesel(table_name = glossary_content)]
pub struct GlossaryContent {
    pub id: String,
    pub term_id: String,
    pub language: String,
    pub term: String,
    pub definition_markdown: String,
    pub created_at: chrono::NaiveDateTime,
    pub updated_at: chrono::NaiveDateTime,
}

// Insertable structs (for creating new records)
#[derive(Insertable, Debug)]
#[diesel(table_name = rule_sets)]
pub struct NewRuleSet {
    pub id: String,
    pub name: String,
    pub slug: String,
    pub description: Option<String>,
}

#[derive(Insertable, Debug)]
#[diesel(table_name = versions)]
pub struct NewVersion {
    pub id: String,
    pub rule_set_id: String,
    pub version_name: String,
    pub effective_from: chrono::NaiveDate,
    pub effective_to: Option<chrono::NaiveDate>,
    pub description: Option<String>,
    pub is_current: bool,
}

#[derive(Insertable, Debug)]
#[diesel(table_name = rules)]
pub struct NewRule {
    pub id: String,
    pub slug: String,
    pub rule_set_id: String,
    pub version_id: String,
    pub parent_rule_id: Option<String>,
    pub number: String,
}

#[derive(Insertable, Debug)]
#[diesel(table_name = rule_content)]
pub struct NewRuleContent {
    pub id: String,
    pub rule_id: String,
    pub language: String,
    pub content_markdown: String,
    pub source_content_id: Option<String>,
}

#[derive(Insertable, Debug)]
#[diesel(table_name = glossary_terms)]
pub struct NewGlossaryTerm {
    pub id: String,
    pub rule_set_id: String,
    pub version_id: String,
    pub slug: String,
}

#[derive(Insertable, Debug)]
#[diesel(table_name = glossary_content)]
pub struct NewGlossaryContent {
    pub id: String,
    pub term_id: String,
    pub language: String,
    pub term: String,
    pub definition_markdown: String,
}

// Helper functions for generating UUIDs
impl NewRuleSet {
    pub fn new(name: String, slug: String, description: Option<String>) -> Self {
        Self {
            id: Uuid::now_v7().to_string(),
            name,
            slug,
            description,
        }
    }
}

impl NewVersion {
    pub fn new(
        rule_set_id: String,
        version_name: String,
        effective_from: chrono::NaiveDate,
        effective_to: Option<chrono::NaiveDate>,
        description: Option<String>,
        is_current: bool,
    ) -> Self {
        Self {
            id: Uuid::now_v7().to_string(),
            rule_set_id,
            version_name,
            effective_from,
            effective_to,
            description,
            is_current,
        }
    }
}

impl NewRule {
    pub fn new(
        slug: String,
        rule_set_id: String,
        version_id: String,
        parent_rule_id: Option<String>,
        number: String,
    ) -> Self {
        Self {
            id: Uuid::now_v7().to_string(),
            slug,
            rule_set_id,
            version_id,
            parent_rule_id,
            number,
        }
    }
}

impl NewRuleContent {
    pub fn new(
        rule_id: String,
        language: String,
        content_markdown: String,
        source_content_id: Option<String>,
    ) -> Self {
        Self {
            id: Uuid::now_v7().to_string(),
            rule_id,
            language,
            content_markdown,
            source_content_id,
        }
    }
}

impl NewGlossaryTerm {
    pub fn new(
        rule_set_id: String,
        version_id: String,
        slug: String,
    ) -> Self {
        Self {
            id: Uuid::now_v7().to_string(),
            rule_set_id,
            version_id,
            slug,
        }
    }
}

impl NewGlossaryContent {
    pub fn new(
        term_id: String,
        language: String,
        term: String,
        definition_markdown: String,
    ) -> Self {
        Self {
            id: Uuid::now_v7().to_string(),
            term_id,
            language,
            term,
            definition_markdown,
        }
    }
}
